openapi: 3.0.0
info:
  title: Gestion hotel
  version: 1.0.0
servers:
- url: https://Subscription.io/
paths:
  /hotels:
    get:
      tags:
      - Hotel
      summary: get hotels list
      operationId: getHotels
      parameters:
        - name: hotel_name
          in: query
          required: false
          schema:
            type: string
      responses:
        200:
          description: All list of hotel
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Hotel'
  /hotel:
    post:
      tags:
      - Hotel
      summary: insert a new Hotel
      operationId: insertNewHotel
      requestBody:
        description: This request is use to add a new "Hotel"
        content:
          application/json:
            schema:
              type: object
              properties:
                nameHotel:
                  type: string
                  example: Novotel
                typeHotel:
                  type: object
                  properties:
                    idHotelType:
                      type: integer
                      example: 1
                    hotelType:
                      type: string
                      example: Luxe
                hotel-rooms:
                  type: array
                  items:
                    type: integer
                    example: 1
        required: true
      responses:
        200:
          description: hotel-room added
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Hotel'
        400:
          description: Bad request
  /hotel/{id}:
    put:
      tags:
      - Hotel
      summary: change hotel information
      operationId: changeHotelInformation
      parameters:
      - name: Id
        in: path
        required: true
        schema:
          type: integer
      responses:
          200:
            description: change hotel information
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/hotel-room_by_hotel'
    delete:
      tags:
      - Hotel
      summary: delete hotel by id
      operationId: deleteHotelById
      responses:
        200:
          description: hotel deleted Successfully
  /hotel/{id_hotel}/hotel-rooms:
    get:
      tags:
      - hotel-room
      summary: get hotel-rooms by hotel
      operationId: gethotel-roomByHotel
      parameters:
        - name: id_hotel
          in: path
          required: true
          schema:
            type: integer
      responses:
          200:
            description:  All hotel-room filter by hotel
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/hotel-room'
  /hotel-room:
    post:
      tags:
      - hotel-room
      summary: Add a new "hotel-room"
      operationId: addhotel-room
      requestBody:
        description: This request is use to add a new "hotel-room"
        content:
          application/json:
            schema:
              type: object
              properties:
                reserved:
                  type: boolean
                  example: false
                locationPrice:
                  type: integer
                  example: 50000000
                typeLocation:
                  type: object
                  properties:
                    idLocationType:
                      type: integer
                      example: 1
                    locationType:
                      type: string
                      example: VIP
                idTypehotel-room:
                  type: array
                  items:
                    type: integer
                    example: 1
                idHotel:
                 type: integer
                 example: 1
        required: true
      responses:
        200:
          description: hotel-room added
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/hotel-room'
        400:
          description: Bad request
  /hotel-rooms:
    get:
      tags:
      - hotel-room
      summary: Get a list of "hotel-room"
      operationId: gethotel-room  
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
        - name: page_size
          in: query
          required: false
          schema:
            type: integer
        - name: location_price
          in: query
          required: false
          schema:
            type: number
        - name: name_hotel
          in: query
          required: false
          schema:
            type: string
        - name: reserved
          in: query
          required: false
          schema:
            type: boolean    
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/hotel-room'
        400:
          description: Bad request
  /hotel-room-available:
    get:
      tags:
      - hotel-room
      summary: get all hotel-room not reserved
      operationId: getHotelRoomNotReserved
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
        - name: page_size
          in: query
          required: false
          schema:
            type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/hotel-room'
        400:
          description: bad request
  /hotel-room/{id}:
    patch:
      tags:
      - hotel-room
      summary: Change some details of "hotel-room" by Id
      operationId: pathhotel-roomById
      parameters:
      - name: Id
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Createhotel-room'
            examples:
              changeName:
                summary: Change hotel-room content
                value:
                  prixLogement: 500000
                  typeLogement: VIP
                  typehotel-room: 1Lit
                  hotel: Novotel
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/hotel-room'
        400:
          description: bad request
    delete:
      tags:
      - hotel-room
      summary: Delete "hotel-room" by Id
      operationId: deletehotel-room
      parameters:
        - name: Id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: successful delete
        400:
          description: bad request            
  /customer:
    post:
      tags:
      - Customer
      summary: Add a new Customer
      operationId: addCustomer
      requestBody:
        description: Customer object that needs to be added
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateCustomer'
        required: true
      responses:
        200:
          description: Customer added
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        400:
          description: Bad request
  /custmers:
    get:
      tags:
      - Customer
      summary: Get a list of Customer
      operationId: getCustomer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        400:
          description: Bad request
  /customer/{id}:
    delete:
      tags:
      - Customer
      summary: Delete a Customer by Id
      operationId: deleteCustomerId
      parameters:
      - name: Id
        in: path
        required: true
        schema:
          type: integer
      responses:
        200: 
          description: Successfully deleted
        400:
          description: Bad request
    put:
      tags:
        - Customer
      summary: Modifie some customer details
      operationId: updateCustomer
      parameters:
      - name: Id
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateCustomer'
      responses:
        200:
          description: Success
        400:
          description: Bad request
    get:
      tags:
      - Customer
      summary: Get specific Customer by Id or by name
      operationId: get customer by Id or name
      parameters:
        - name: Id
          in: path
          required: true
          schema:
            type: integer
        - name: name
          in: query
          required: false
          schema:
            type: string
        - name: last_name
          in: query
          required: false
          schema: 
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
  /customer/{id}/change:
    patch:
      tags:
      - Customer
      summary: Change Customer by Id
      description: Multiple status values can be provIded with comma separated strings
      operationId: putCustomerId
      parameters:
      - name: Id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: name
        in: query
        required: false
        schema:
          type: string
      - name: last_name
        in: query
        required: false
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CreateCustomer'
        400:
          description: Bad request   
  /countries:
    post:
      tags:
      - Country
      operationId: insertCountry
      requestBody:
        description: Customer object that needs to be added
        content:
          application/json:
            schema:
                  $ref: '#/components/schemas/CreateCountry'
        required: false
      responses:
        200:
          description: Customer added
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Country'
        400:
          description: Bad request
    get:
      tags:
      - Country
      summary: Get a list of Country
      operationId: getCountry
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Country'
        400:
          description: Bad request
  /country/{id}:
    delete:
      tags:
      - Country
      summary: Delete a Country by Id
      operationId: deleteCountryById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Successfully deleted
        400:
          description: Bad request
    put:
      tags:
      - Country
      summary: Change Country by Id
      description: Multiple status values can be provIded with comma separated strings
      operationId: putCountryById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      - name: country_name
        in: query
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
        400:
          description: Bad request
  /hotels_type:
    get:
      tags:
      - Hotel_type
      summary: Get a list of hotels_type
      operationId: getHotelType
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Hotel_type'
        400:
          description: Bad request
  /hotel_type/{id}:
    delete:
      tags:
      - Hotel_type
      summary: Delete a hotel_type by Id
      operationId: delete hotel_type by id
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Successfully deleted
        400:
          description: Bad request
    put:
      tags:
      - Hotel_type
      summary: Change hotel_type by Id
      description: change hotel_type type
      operationId: putHotelType
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      - name: hotel_type
        in: query
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hotel_type'
        400:
          description: Bad request
  /hotel-room_type:
    get:
      tags:
      - hotel-room_type
      summary: Get a list of hotel-room_type
      operationId: gethotel-room_type
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/hotel-room_type'
        400:
          description: Bad request
  /hotel-room_type/{id}:
    delete:
      tags:
      - hotel-room_type
      summary: Delete a hotel-room_type by Id
      operationId: delete hotel-room_type by id
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Successfully deleted
        400:
          description: Bad request
    put:
      tags:
      - hotel-room_type
      summary: Change hotel-room_type by Id
      description: change hotel-room_type type
      operationId: puthotel-roomType
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      - name: hotel-room_type
        in: query
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hotel-room_type'
        400:
          description: Bad request
  /location_types:
    get:
      tags:
      - Location_type
      summary: Get a list of location_type
      operationId: getCountry
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Hotel_type'
        400:
          description: Bad request
  /location_type/{id}:
    delete:
      tags:
      - Location_type
      summary: Delete a location_type by Id
      operationId: delete location_type by id
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Successfully deleted
        400:
          description: Bad request
    put:
      tags:
      - Location_type
      summary: Change location_type by Id
      description: change location_type 
      operationId: putLocationType
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      - name: location_type
        in: query
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location_type'
        400:
          description: Bad request
components:
  schemas:
    Hotel:
      type: object
      properties:
        idHotel:
          type: integer
          example: 1
        nameHotel:
          type: string
          example: Novotel
        typeHotel:
          type: object
          properties:
            idHotelType:
              type: integer
              example: 1
            hotelType:
              type: string
              example: Luxe
        bedroom:
          type: array
          items:
            type: object
            properties:
              Idhotel-room:
                type: integer
                example: 1
              reserved:
                type: boolean
                example: true
              locationPrice:
                type: integer
                example: 50000
              hotel:
                type: string
                example: novotel
              typeLocation:
                type: object
                properties: 
                  locationType:
                    type: string
                    example: VIP
              typehotel-room:
                type: object
                properties:
                  idhotel-roomType:
                    type: integer
                    example: 1
                  hotel-roomType:
                    type: string
                    example: Large  
    Location_type:
      type: object
      properties:
        idLocationType:
          type: integer
          example: 1
        locationType:
          type: string
          example: VIP
    hotel-room_type:
      type: object
      properties:
        idBedroomType:
          type: integer
          example: 1
        hotel-roomType:
          type: string
          example: Large
    hotel-room_by_hotel:
      type: object
      properties:
        IdBedroom:
          type: integer
          example: 1
        prixLogement:
          type: integer
          example: 4500000
        typeLogement: 
          type: string
          example: VIP
        typehotel-room:
          type: string
          example: Large
        hotel:
          type: string
          example: Novotel
        country:
          type: string
          example: Alarobia
    Hotel_type:
      type: object
      properties:
        idHotel:
          type: integer
          example: 1
        hotelType:
          type: string
          example: Luxe
    CreateHotel:
      type: object
      properties:
        nameHotel:
          type: string
          example: Novotel
        typeHotel:
          type: object
          properties:
            idHotelType:
              type: integer
              example: 1
            hotelType:
              type: string
              example: Luxe
        hotel-rooms:
          type: array
          items:
            type: integer
            example: 1
    Createhotel-room:
      type: object
      properties:
        reserved:
            type: boolean
            example: false
        locationPrice:
          type: integer
          example: 500000
        typeLocation:
          type: object
          properties:
            idLocationType:
              type: integer
              example: 1
            locationType:
              type: string
              example: VIP
        idTypehotel-room:
          type: array
          items:
            type: integer
            example: 1
        idHotel:
          type: integer
          example: 1
    CreateCustomer:
      type: object
      properties:
        name:
          type: string
          example: haritiana
        lastName:
          type: string
          example: adriano
        email:
          type: string
          example: hei.adriano.4@gmail.com
        phone:
          type: string
          example: +261 34 76 765 58
    Customer:
      type: object
      properties:
        Id:
          type: integer
          example: 1
        name:
          type: string
          example: haritiana
        lastName:
          type: string
          example: adriano
        email:
          type: string
          example: hei.adriano.4@gmail.com
        phone:
          type: string
          example: +261 34 76 765 58
    hotel-room:
      type: object
      properties:
        IdBedroom:
          type: integer
          example: 1
        reserved:
          type: boolean
          example: true
        locationPrice:
          type: integer
          example: 50000
        hotel:
          type: string
          example: novotel
        typeLocation:
          type: object
          properties: 
            locationType:
              type: string
              example: VIP
        typeBedroom:
          type: object
          properties:
            idBedroom:
              type: integer
              example: 1
            bedroomType:
              type: string
              example: Large  
    CreateCountry:
      type: object
      properties:
        countryName:
          type: string
          example: Antananarivo
    Country:
      type: object
      properties:
        idCountry:
          type: integer
          example: 1
        countryName:
          type: string
          example: Antananarivo
    error400:
      required:
      - type
      - message
      type: object
      properties:
        type:
          type: string
          example: BadRequestException
        group:
          type: string
          example: Bad request
    error403:
      required:
      - type
      - message
      type: object
      properties:
        type:
          type: string
          example: NotAuthorizedException
        group:
          type: string
          example: Not authorized
    error404:
      required:
      - type
      - message
      type: object
      properties:
        type:
          type: string
          example: ResourceNotFoundException
        group:
          type: string
          example: Resource is not found
    error500:
      required:
      - type
      - message
      type: object
      properties:
        type:
          type: string
          example: InternalServerException
        group:
          type: string
          example: Unexpected error